
package service;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.3.2
 * Generated source version: 2.2
 * 
 */
@WebService(name = "FlightManagerInterface", targetNamespace = "http://businessLogic/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface FlightManagerInterface {


    /**
     * 
     */
    @WebMethod
    @RequestWrapper(localName = "initialize", targetNamespace = "http://businessLogic/", className = "service.Initialize")
    @ResponseWrapper(localName = "initializeResponse", targetNamespace = "http://businessLogic/", className = "service.InitializeResponse")
    @Action(input = "http://businessLogic/FlightManagerInterface/initializeRequest", output = "http://businessLogic/FlightManagerInterface/initializeResponse")
    public void initialize();

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<service.ConcreteFlight>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getConcreteFlights", targetNamespace = "http://businessLogic/", className = "service.GetConcreteFlights")
    @ResponseWrapper(localName = "getConcreteFlightsResponse", targetNamespace = "http://businessLogic/", className = "service.GetConcreteFlightsResponse")
    @Action(input = "http://businessLogic/FlightManagerInterface/getConcreteFlightsRequest", output = "http://businessLogic/FlightManagerInterface/getConcreteFlightsResponse")
    public List<ConcreteFlight> getConcreteFlights(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        Object arg2);

    /**
     * 
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "storeFlight", targetNamespace = "http://businessLogic/", className = "service.StoreFlight")
    @ResponseWrapper(localName = "storeFlightResponse", targetNamespace = "http://businessLogic/", className = "service.StoreFlightResponse")
    @Action(input = "http://businessLogic/FlightManagerInterface/storeFlightRequest", output = "http://businessLogic/FlightManagerInterface/storeFlightResponse")
    public void storeFlight(
        @WebParam(name = "arg0", targetNamespace = "")
        Flight arg0);

    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "bookSeat", targetNamespace = "http://businessLogic/", className = "service.BookSeat")
    @ResponseWrapper(localName = "bookSeatResponse", targetNamespace = "http://businessLogic/", className = "service.BookSeatResponse")
    @Action(input = "http://businessLogic/FlightManagerInterface/bookSeatRequest", output = "http://businessLogic/FlightManagerInterface/bookSeatResponse")
    public void bookSeat(
        @WebParam(name = "arg0", targetNamespace = "")
        ConcreteFlight arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.util.List<service.ConcreteFlightContainer>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getListConcreteFlightContainer", targetNamespace = "http://businessLogic/", className = "service.GetListConcreteFlightContainer")
    @ResponseWrapper(localName = "getListConcreteFlightContainerResponse", targetNamespace = "http://businessLogic/", className = "service.GetListConcreteFlightContainerResponse")
    @Action(input = "http://businessLogic/FlightManagerInterface/getListConcreteFlightContainerRequest", output = "http://businessLogic/FlightManagerInterface/getListConcreteFlightContainerResponse")
    public List<ConcreteFlightContainer> getListConcreteFlightContainer(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        String arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        Object arg2);

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAllDepartingCities", targetNamespace = "http://businessLogic/", className = "service.GetAllDepartingCities")
    @ResponseWrapper(localName = "getAllDepartingCitiesResponse", targetNamespace = "http://businessLogic/", className = "service.GetAllDepartingCitiesResponse")
    @Action(input = "http://businessLogic/FlightManagerInterface/getAllDepartingCitiesRequest", output = "http://businessLogic/FlightManagerInterface/getAllDepartingCitiesResponse")
    public List<String> getAllDepartingCities();

    /**
     * 
     * @param arg0
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getArrivalCitiesFrom", targetNamespace = "http://businessLogic/", className = "service.GetArrivalCitiesFrom")
    @ResponseWrapper(localName = "getArrivalCitiesFromResponse", targetNamespace = "http://businessLogic/", className = "service.GetArrivalCitiesFromResponse")
    @Action(input = "http://businessLogic/FlightManagerInterface/getArrivalCitiesFromRequest", output = "http://businessLogic/FlightManagerInterface/getArrivalCitiesFromResponse")
    public List<String> getArrivalCitiesFrom(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

}
